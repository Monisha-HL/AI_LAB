import random

def print_board(state):
    n = len(state)
    for row in range(n):
        line = ""
        for col in range(n):
            if state[col] == row:
                line += "Q "
            else:
                line += ". "
        print(line)
    print()

def compute_conflicts(state):
    conflicts = 0
    n = len(state)
    for i in range(n):
        for j in range(i + 1, n):
            if state[i] == state[j] or abs(state[i] - state[j]) == abs(i - j):
                conflicts += 1
    return conflicts

def get_best_neighbor(state):
    n = len(state)
    best_state = list(state)
    best_conflicts = compute_conflicts(state)

    for col in range(n):
        original_row = state[col]
        for row in range(n):
            if row != original_row:
                new_state = list(state)
                new_state[col] = row
                new_conflicts = compute_conflicts(new_state)
                if new_conflicts < best_conflicts:
                    best_conflicts = new_conflicts
                    best_state = new_state
    return best_state, best_conflicts

def hill_climbing(initial_state):
    current = initial_state
    current_conflicts = compute_conflicts(current)
    steps = 0

    while True:
        neighbor, neighbor_conflicts = get_best_neighbor(current)
        if neighbor_conflicts >= current_conflicts:
            break 
        current = neighbor
        current_conflicts = neighbor_conflicts
        steps += 1

    return current, current_conflicts, steps

if __name__ == "__main__":
    n = int(input("Enter the number of queens (N): "))
    initial_input = input(f"Enter initial state as {n} space-separated row indices (e.g., '0 2 4 1'): ")
    initial_state = list(map(int, initial_input.strip().split()))

    if len(initial_state) != n or any(r < 0 or r >= n for r in initial_state):
        print("Invalid input. Please enter N integers between 0 and N-1.")
    else:
        print("\n Initial Board:")
        print_board(initial_state)

        final_state, final_conflicts, steps = hill_climbing(initial_state)

        print("Final Board after Hill Climbing:")
        print_board(final_state)
        print(f"Conflicts: {final_conflicts}, Steps taken: {steps}")
