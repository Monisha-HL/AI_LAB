from copy import deepcopy
def is_goal(state, goal):
    return state==goal
def find_blank(state):
    for i in range(3):
        for j in range(3):
            if state[i][j]==0:
                return i,j
def get_neighbors(state):
    neighbors=[]
    x, y=find_blank(state)
    directions=[(0,-1), (-1, 0), (1,0), (0,1)]
    for dx, dy in directions:
        nx, ny = x + dx, y + dy
        if 0 <= nx < 3 and 0 <= ny < 3:
            new_state = deepcopy(state)
            new_state[x][y], new_state[nx][ny] = new_state[nx][ny], new_state[x][y]
            neighbors.append(new_state)
    return neighbors
def dfs(initial, goal):
    stack=[(initial, [])]
    visited=set()
    while stack:
        current, path = stack.pop()
        state_tuple = tuple(map(tuple, current))
        if state_tuple in visited:
            continue
        visited.add(state_tuple)
        if is_goal(current, goal):
            return path + [current]
        for neighbor in get_neighbors(current):
            stack.append((neighbor, path + [current]))
    return None
def print_state(state):
    for row in state:
        print(row)
    print()
def get_input_state(prompt):
    print(prompt)
    state = []
    for i in range(3):
        row = list(map(int, input(f"Enter row {i+1} (3 numbers separated by space): ").split()))
        state.append(row)
    return state
if __name__ == "__main__":
    initial = get_input_state("Enter the initial state:")
    goal = get_input_state("Enter the goal state:")
    solution = dfs(initial, goal)
    if solution:
        print("\n Solution found in", len(solution)-1, "moves:")
        for step in solution:
            print_state(step)
    else:
        print("\n No solution found.")
