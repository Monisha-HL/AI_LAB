import heapq
class PuzzleState:
    def __init__(self, board, parent=None, g=0):
        self.board = board
        self.parent = parent
        self.g = g  
        self.h = 0 
        self.f = 0
        
    def __lt__(self, other):
        return self.f < other.f

    def find_blank(self):
        for i in range(3):
            for j in range(3):
                if self.board[i][j] == 0:
                    return i, j
                    
    def generate_children(self):
        children = []
        x, y = self.find_blank()
        directions = [(-1,0), (1,0), (0,-1), (0,1)]  

        for dx, dy in directions:
            nx, ny = x + dx, y + dy
            if 0 <= nx < 3 and 0 <= ny < 3:
                new_board = [row[:] for row in self.board]
                new_board[x][y], new_board[nx][ny] = new_board[nx][ny], new_board[x][y]
                children.append(PuzzleState(new_board, self, self.g + 1))
        return children

    def manhattan_distance(self, goal):
        distance = 0
        for i in range(3):
            for j in range(3):
                value = self.board[i][j]
                if value != 0:
                    for x in range(3):
                        for y in range(3):
                            if goal[x][y] == value:
                                distance += abs(i - x) + abs(j - y)
                                break
        return distance
        
    def is_goal(self, goal):
        return self.board == goal

    def __str__(self):
        return '\n'.join([' '.join(map(str, row)) for row in self.board])

def a_star_search(start, goal):
    start_state = PuzzleState(start)
    start_state.h = start_state.manhattan_distance(goal)
    start_state.f = start_state.g + start_state.h

    open_list = []
    heapq.heappush(open_list, start_state)
    closed_set = set()

    while open_list:
        current = heapq.heappop(open_list)
        if current.is_goal(goal):
            return reconstruct_path(current)

        closed_set.add(str(current.board))

        for child in current.generate_children():
            if str(child.board) in closed_set:
                continue
            child.h = child.manhattan_distance(goal)
            child.f = child.g + child.h
            heapq.heappush(open_list, child)
    return None

def reconstruct_path(state):
    path = []
    while state:
        path.append(state)
        state = state.parent
    return path[::-1]

def input_board(prompt):
    print(prompt)
    board = []
    for _ in range(3):
        row = list(map(int, input().strip().split()))
        board.append(row)
    return board

if __name__ == "__main__":
    start = input_board("Enter the initial state (use 0 for blank):")
    goal = input_board("Enter the goal state:")

    path = a_star_search(start, goal)
    if path:
        print(f"\n Solution found in {len(path)-1} moves:\n")
        for step in path:
            print(step)
            print()
    else:
        print("No solution found.")
